[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://cq56y0lf6m4xi"]

[sub_resource type="Shader" id="Shader_or55a"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.0.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;



vec3 process_star(vec3 sky, float light_size, vec3 light_color, float light_energy, vec3 light_dir, vec3 eye_dir) {
	float sun_angle = acos(dot(light_dir, eye_dir));
	if (sun_angle < light_size) {
		sky = light_color * light_energy;
	} else  if (sun_angle < sun_angle_max) {
		float c2 = (sun_angle - light_size) / (sun_angle_max - light_size);
		return mix((light_color * light_energy), sky, clamp(1.0 - pow(1.1 - c2, 1.0 / sun_curve), 0.0, 1.0));
	}
}
	



void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		sky = process_star(sky, LIGHT0_SIZE, LIGHT0_COLOR, LIGHT0_ENERGY, LIGHT0_DIRECTION, EYEDIR);
	}

	if (LIGHT1_ENABLED) {
		sky = process_star(sky, LIGHT1_SIZE, LIGHT1_COLOR, LIGHT1_ENERGY, LIGHT1_DIRECTION, EYEDIR);
	}

	if (LIGHT2_ENABLED) {
		sky = process_star(sky, LIGHT2_SIZE, LIGHT2_COLOR, LIGHT2_ENERGY, LIGHT2_DIRECTION, EYEDIR);
	}

	if (LIGHT3_ENABLED) {
		sky = process_star(sky, LIGHT3_SIZE, LIGHT3_COLOR, LIGHT3_ENERGY, LIGHT3_DIRECTION, EYEDIR);
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	COLOR = mix(ground, sky, step(0.0, EYEDIR.y));
}
"

[resource]
shader = SubResource("Shader_or55a")
shader_parameter/sky_top_color = Color(0, 0, 0, 1)
shader_parameter/sky_horizon_color = Color(0, 0, 0, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0, 0, 0, 1)
shader_parameter/ground_horizon_color = Color(0, 0, 0, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
